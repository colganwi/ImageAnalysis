%This program can be used to automate analysis of mutiple image files
path = uigetdir('/Users/cionalab/Google Drive/William/Image Analysis');
filenames = dir(path);
names = {filenames(:).name};
image = string(zeros(42,1));
colocd = zeros(42,1);
colocv = zeros(42,1);
overlapgreend = zeros(42,1);
overlapgreenv = zeros(42,1);
averageredd = zeros(42,1);
averageredv = zeros(42,1);
enrichmentred = zeros(42,1);
averagegreend = zeros(42,1);
averagegreenv = zeros(42,1);
enrichmentgreen = zeros(42,1);
threshredd = zeros(42,1);
threshredv = zeros(42,1);
threshenrichmentred = zeros(42,1);
threshgreend = zeros(42,1);
threshgreenv = zeros(42,1);
threshenrichmentgreen = zeros(42,1);
coloc1d = zeros(42,1);
coloc2d = zeros(42,1);
coloc3d = zeros(42,1);
coloc1v = zeros(42,1);
coloc2v = zeros(42,1);
coloc3v = zeros(42,1);
overlapgreen1d = zeros(42,1);
overlapgreen2d = zeros(42,1);
overlapgreen3d = zeros(42,1);
overlapgreen1v = zeros(42,1);
overlapgreen2v = zeros(42,1);
overlapgreen3v = zeros(42,1);
relativered1d = zeros(42,1);
relativered2d = zeros(42,1);
relativered3d = zeros(42,1);
relativered1v = zeros(42,1);
relativered2v = zeros(42,1);
relativered3v = zeros(42,1);
relativegreen1d = zeros(42,1);
relativegreen2d = zeros(42,1);
relativegreen3d = zeros(42,1);
relativegreen1v = zeros(42,1);
relativegreen2v = zeros(42,1);
relativegreen3v = zeros(42,1);
threshred1d = zeros(42,1);
threshred2d = zeros(42,1);
threshred3d = zeros(42,1);
threshred1v = zeros(42,1);
threshred2v = zeros(42,1);
threshred3v = zeros(42,1);
threshgreen1d = zeros(42,1);
threshgreen2d = zeros(42,1);
threshgreen3d = zeros(42,1);
threshgreen1v = zeros(42,1);
threshgreen2v = zeros(42,1);
threshgreen3v = zeros(42,1);
num = 0;
for i = 1:size(names,2)
    name = names{i};
    [pathstr,title,ext] = fileparts(name); 
    if(strcmp(ext,'.tif') &&  title(1) ~= 'm')
        num = num + 1;
        image(num) = name;
        [C1,C2,C3,voxelSize] = loadtif3(name);
        cellMask = loadtif1(strcat('mask_',name));
        l = sum(sum(cellMask));
        l = reshape(l,[size(l,3),1]);
%         third = 2*(sum(l)/3);
%         total = 0;
%         k = 1;
%         while total < third
%             total = total + l(k);
%             k = k + 1;
%         end
        k = round(COG(l));
        D = zeros(size(cellMask));
        D(:,:,(1:k)) = 1;
        V = zeros(size(cellMask));
        V(:,:,(k+1:end)) = 1;
        cellMaskd = cellMask.*D;
        cellMaskv = cellMask.*V;
        [region1,region2,region3] = makeregions(cellMask,1,2,voxelSize);
        region1d = region1.*D;
        region2d = region2.*D;
        region3d = region3.*D;
        region1v = region1.*V;
        region2v = region2.*V;
        region3v = region3.*V;
        %Get Pearson
        colocd(num) = pearson(C1,C2,cellMaskd);
        coloc1d(num) = pearson(C1,C2,region1d);
        coloc2d(num) = pearson(C1,C2,region2d);
        coloc3d(num) = pearson(C1,C2,region3d);
        colocv(num) = pearson(C1,C2,cellMaskv);
        coloc1v(num) = pearson(C1,C2,region1v);
        coloc2v(num) = pearson(C1,C2,region2v);
        coloc3v(num) = pearson(C1,C2,region3v);
        %Get Volumes
        vCellMask = sum(sum(sum(cellMask)));
        vCellMaskd = sum(sum(sum(cellMaskd)));
        vRegion1d = sum(sum(sum(region1d)));
        vRegion2d = sum(sum(sum(region2d)));
        vRegion3d = sum(sum(sum(region3d)));
        vCellMaskv = sum(sum(sum(cellMaskv)));
        vRegion1v = sum(sum(sum(region1v)));
        vRegion2v = sum(sum(sum(region2v)));
        vRegion3v = sum(sum(sum(region3v)));
        %Threshold
        C4 = imgaussfilt(C1,1);
        thresh = getthresh(C4,cellMask,95);
        C4 = double(C4>thresh);
        C5 = imgaussfilt(C2,1);
        thresh = getthresh(C5,cellMask,90);
        C5 = double(C5>thresh);
        %Get Overlapgreen
        C6 = C4.*C5;
        overlapgreend(num) = sum(sum(sum(C6.*cellMaskd)))/sum(sum(sum(C5.*cellMaskd)));
        overlapgreen1d(num) = sum(sum(sum(C6.*region1d)))/sum(sum(sum(C5.*region1d)));
        overlapgreen2d(num) = sum(sum(sum(C6.*region2d)))/sum(sum(sum(C5.*region2d)));
        overlapgreen3d(num) = sum(sum(sum(C6.*region3d)))/sum(sum(sum(C5.*region3d)));
        overlapgreenv(num) = sum(sum(sum(C6.*cellMaskv)))/sum(sum(sum(C5.*cellMaskv)));
        overlapgreen1v(num) = sum(sum(sum(C6.*region1v)))/sum(sum(sum(C5.*region1v)));
        overlapgreen2v(num) = sum(sum(sum(C6.*region2v)))/sum(sum(sum(C5.*region2v)));
        overlapgreen3v(num) = sum(sum(sum(C6.*region3v)))/sum(sum(sum(C5.*region3v)));
        %Red
        red = sum(sum(sum(C1.*cellMask)))/vCellMask;
        averageredd(num) = sum(sum(sum(C1.*cellMaskd)))/vCellMaskd;
        averageredv(num) = sum(sum(sum(C1.*cellMaskv)))/vCellMaskv;
        enrichmentred(num) = averageredv(num)/averageredd(num);
        relativered1d(num) = sum(sum(sum(C1.*region1d)))/vRegion1d/red;
        relativered2d(num) = sum(sum(sum(C1.*region2d)))/vRegion2d/red;
        relativered3d(num) = sum(sum(sum(C1.*region3d)))/vRegion3d/red;
        relativered1v(num) = sum(sum(sum(C1.*region1v)))/vRegion1v/red;
        relativered2v(num) = sum(sum(sum(C1.*region2v)))/vRegion2v/red;
        relativered3v(num) = sum(sum(sum(C1.*region3v)))/vRegion3v/red;
        %Green
        green = sum(sum(sum(C2.*cellMask)))/vCellMask;
        averagegreend(num) = sum(sum(sum(C2.*cellMaskd)))/vCellMaskd;
        averagegreenv(num) = sum(sum(sum(C2.*cellMaskv)))/vCellMaskv;
        enrichmentgreen(num) = averagegreenv(num)/averagegreend(num);
        relativegreen1d(num) = sum(sum(sum(C2.*region1d)))/vRegion1d/green;
        relativegreen2d(num) = sum(sum(sum(C2.*region2d)))/vRegion2d/green;
        relativegreen3d(num) = sum(sum(sum(C2.*region3d)))/vRegion3d/green;
        relativegreen1v(num) = sum(sum(sum(C2.*region1v)))/vRegion1v/green;
        relativegreen2v(num) = sum(sum(sum(C2.*region2v)))/vRegion2v/green;
        relativegreen3v(num) = sum(sum(sum(C2.*region3v)))/vRegion3v/green;
        %Thresholded Red
        red = sum(sum(sum(C4.*cellMask)))/vCellMask;
        threshredd(num) = sum(sum(sum(C4.*cellMaskd)))/vCellMaskd/red;
        threshred1d(num) = sum(sum(sum(C4.*region1d)))/vRegion1d/red;
        threshred2d(num) = sum(sum(sum(C4.*region2d)))/vRegion2d/red;
        threshred3d(num) = sum(sum(sum(C4.*region3d)))/vRegion3d/red;
        threshredv(num) = sum(sum(sum(C4.*cellMaskv)))/vCellMaskv/red;
        threshred1v(num) = sum(sum(sum(C4.*region1v)))/vRegion1v/red;
        threshred2v(num) = sum(sum(sum(C4.*region2v)))/vRegion2v/red;
        threshred3v(num) = sum(sum(sum(C4.*region3v)))/vRegion3v/red;
        threshenrichmentred(num) = threshredv(num)/threshredd(num);
        %Thresholded Green
        green = sum(sum(sum(C5.*cellMask)))/vCellMask;
        threshgreend(num) = sum(sum(sum(C5.*cellMaskd)))/vCellMaskd/green;
        threshgreen1d(num) = sum(sum(sum(C5.*region1d)))/vRegion1d/green;
        threshgreen2d(num) = sum(sum(sum(C5.*region2d)))/vRegion2d/green;
        threshgreen3d(num) = sum(sum(sum(C5.*region3d)))/vRegion3d/green;
        threshgreenv(num) = sum(sum(sum(C5.*cellMaskv)))/vCellMaskv/green;
        threshgreen1v(num) = sum(sum(sum(C5.*region1v)))/vRegion1v/green;
        threshgreen2v(num) = sum(sum(sum(C5.*region2v)))/vRegion2v/green;
        threshgreen3v(num) = sum(sum(sum(C5.*region3v)))/vRegion3v/green;
        threshenrichmentgreen(num) = threshgreenv(num)/threshgreend(num);
    end
end
image(41) = 'average';
colocd(41) = sum(colocd(1:num))/num;
overlapgreend(41) = sum(overlapgreend(1:num))/num;
averageredd(41) = sum(averageredd(1:num))/num;
averagegreend(41) = sum(averagegreend(1:num))/num;
threshredd(41) = sum(threshredd(1:num))/num;
threshgreend(41) = sum(threshgreend(1:num))/num;
coloc1d(41) = sum(coloc1d(1:num))/num;
coloc2d(41) = sum(coloc2d(1:num))/num;
coloc3d(41) = sum(coloc3d(1:num))/num;
overlapgreen1d(41) = sum(overlapgreen1d(1:num))/num;
overlapgreen2d(41) = sum(overlapgreen2d(1:num))/num;
overlapgreen3d(41) = sum(overlapgreen3d(1:num))/num;
relativered1d(41) = sum(relativered1d(1:num))/num;
relativered2d(41) = sum(relativered2d(1:num))/num;
relativered3d(41) = sum(relativered3d(1:num))/num;
relativegreen1d(41) = sum(relativegreen1d(1:num))/num;
relativegreen2d(41) = sum(relativegreen2d(1:num))/num;
relativegreen3d(41) = sum(relativegreen3d(1:num))/num;
threshred1d(41) = sum(threshred1d(1:num))/num;
threshred2d(41) = sum(threshred2d(1:num))/num;
threshred3d(41) = sum(threshred3d(1:num))/num;
threshgreen1d(41) = sum(threshgreen1d(1:num))/num;
threshgreen2d(41) = sum(threshgreen2d(1:num))/num;
threshgreen3d(41) = sum(threshgreen3d(1:num))/num;
enrichmentred(41) = sum(enrichmentred(1:num))/num;
enrichmentgreen(41) = sum(enrichmentgreen(1:num))/num;
threshenrichmentred(41) = sum(threshenrichmentred(1:num))/num;
threshenrichmentgreen(41) = sum(threshenrichmentgreen(1:num))/num;
image(42) = 'standard error';
colocd(42) = std(colocd(1:num))/sqrt(num);
overlapgreend(42) = std(overlapgreend(1:num))/sqrt(num);
averageredd(42) = std(averageredd(1:num))/sqrt(num);
averagegreend(42) = std(averagegreend(1:num))/sqrt(num);
threshredd(42) = std(threshredd(1:num))/sqrt(num);
threshgreend(42) = std(threshgreend(1:num))/sqrt(num);
coloc1d(42) = std(coloc1d(1:num))/sqrt(num);
coloc2d(42) = std(coloc2d(1:num))/sqrt(num);
coloc3d(42) = std(coloc3d(1:num))/sqrt(num);
overlapgreen1d(42) = std(overlapgreen1d(1:num))/sqrt(num);
overlapgreen2d(42) = std(overlapgreen2d(1:num))/sqrt(num);
overlapgreen3d(42) = std(overlapgreen3d(1:num))/sqrt(num);
relativered1d(42) = std(relativered1d(1:num))/sqrt(num);
relativered2d(42) = std(relativered2d(1:num))/sqrt(num);
relativered3d(42) = std(relativered3d(1:num))/sqrt(num);
relativegreen1d(42) = std(relativegreen1d(1:num))/sqrt(num);
relativegreen2d(42) = std(relativegreen2d(1:num))/sqrt(num);
relativegreen3d(42) = std(relativegreen3d(1:num))/sqrt(num);
threshred1d(42) = std(threshred1d(1:num))/sqrt(num);
threshred2d(42) = std(threshred2d(1:num))/sqrt(num);
threshred3d(42) = std(threshred3d(1:num))/sqrt(num);
threshgreen1d(42) = std(threshgreen1d(1:num))/sqrt(num);
threshgreen2d(42) = std(threshgreen2d(1:num))/sqrt(num);
threshgreen3d(42) = std(threshgreen3d(1:num))/sqrt(num);
enrichmentred(42) = std(enrichmentred(1:num))/sqrt(num);
enrichmentgreen(42) = std(enrichmentgreen(1:num))/sqrt(num);
threshenrichmentred(42) = std(threshenrichmentred(1:num))/sqrt(num);
threshenrichmentgreen(42) = std(threshenrichmentgreen(1:num))/sqrt(num);

colocv(41) = sum(colocv(1:num))/num;
overlapgreenv(41) = sum(overlapgreenv(1:num))/num;
averageredv(41) = sum(averageredv(1:num))/num;
averagegreenv(41) = sum(averagegreenv(1:num))/num;
threshredv(41) = sum(threshredv(1:num))/num;
threshgreenv(41) = sum(threshgreenv(1:num))/num;
coloc1v(41) = sum(coloc1v(1:num))/num;
coloc2v(41) = sum(coloc2v(1:num))/num;
coloc3v(41) = sum(coloc3v(1:num))/num;
overlapgreen1v(41) = sum(overlapgreen1v(1:num))/num;
overlapgreen2v(41) = sum(overlapgreen2v(1:num))/num;
overlapgreen3v(41) = sum(overlapgreen3v(1:num))/num;
relativered1v(41) = sum(relativered1v(1:num))/num;
relativered2v(41) = sum(relativered2v(1:num))/num;
relativered3v(41) = sum(relativered3v(1:num))/num;
relativegreen1v(41) = sum(relativegreen1v(1:num))/num;
relativegreen2v(41) = sum(relativegreen2v(1:num))/num;
relativegreen3v(41) = sum(relativegreen3v(1:num))/num;
threshred1v(41) = sum(threshred1v(1:num))/num;
threshred2v(41) = sum(threshred2v(1:num))/num;
threshred3v(41) = sum(threshred3v(1:num))/num;
threshgreen1v(41) = sum(threshgreen1v(1:num))/num;
threshgreen2v(41) = sum(threshgreen2v(1:num))/num;
threshgreen3v(41) = sum(threshgreen3v(1:num))/num;
image(42) = 'standard error';
colocv(42) = std(colocv(1:num))/sqrt(num);
overlapgreenv(42) = std(overlapgreenv(1:num))/sqrt(num);
averageredv(42) = std(averageredv(1:num))/sqrt(num);
averagegreenv(42) = std(averagegreenv(1:num))/sqrt(num);
threshredv(42) = std(threshredv(1:num))/sqrt(num);
threshgreenv(42) = std(threshgreenv(1:num))/sqrt(num);
coloc1v(42) = std(coloc1v(1:num))/sqrt(num);
coloc2v(42) = std(coloc2v(1:num))/sqrt(num);
coloc3v(42) = std(coloc3v(1:num))/sqrt(num);
overlapgreen1v(42) = std(overlapgreen1v(1:num))/sqrt(num);
overlapgreen2v(42) = std(overlapgreen2v(1:num))/sqrt(num);
overlapgreen3v(42) = std(overlapgreen3v(1:num))/sqrt(num);
relativered1v(42) = std(relativered1v(1:num))/sqrt(num);
relativered2v(42) = std(relativered2v(1:num))/sqrt(num);
relativered3v(42) = std(relativered3v(1:num))/sqrt(num);
relativegreen1v(42) = std(relativegreen1v(1:num))/sqrt(num);
relativegreen2v(42) = std(relativegreen2v(1:num))/sqrt(num);
relativegreen3v(42) = std(relativegreen3v(1:num))/sqrt(num);
threshred1v(42) = std(threshred1v(1:num))/sqrt(num);
threshred2v(42) = std(threshred2v(1:num))/sqrt(num);
threshred3v(42) = std(threshred3v(1:num))/sqrt(num);
threshgreen1v(42) = std(threshgreen1v(1:num))/sqrt(num);
threshgreen2v(42) = std(threshgreen2v(1:num))/sqrt(num);
threshgreen3v(42) = std(threshgreen3v(1:num))/sqrt(num);

result = table(image,colocd,colocv,overlapgreend,overlapgreenv,averageredd,averageredv,enrichmentred,averagegreend,averagegreenv,enrichmentgreen,threshredd,threshredv,threshenrichmentred,threshgreend,threshgreenv,threshenrichmentgreen,coloc1d,coloc2d,coloc3d,coloc1v,coloc2v,coloc3v,overlapgreen1d,overlapgreen2d,overlapgreen3d,overlapgreen1v,overlapgreen2v,overlapgreen3v,relativered1d,relativered2d,relativered3d,relativered1v,relativered2v,relativered3v,relativegreen1d,relativegreen2d,relativegreen3d,relativegreen1v,relativegreen2v,relativegreen3v,threshred1d,threshred2d,threshred3d,threshred1v,threshred2v,threshred3v,threshgreen1d,threshgreen2d,threshgreen3d,threshgreen1v,threshgreen2v,threshgreen3v);
writetable(result,strcat(path,'/analysis.xls'));
clear;

